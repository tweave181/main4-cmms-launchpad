import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/auth';
import { toast } from '@/components/ui/use-toast';
import type { Location, LocationFormData, LocationFilters } from '@/types/location';

export const useLocations = (filters?: LocationFilters) => {
  const { userProfile } = useAuth();

  return useQuery({
    queryKey: ['locations', filters],
    queryFn: async () => {
      if (!userProfile?.tenant_id) {
        throw new Error('No tenant found');
      }

      let query = supabase
        .from('locations')
      .select(`
        *,
        parent_location:parent_location_id(id, name, location_code),
        location_level_data:location_level_id(id, name, code, is_active)
      `)
        .eq('tenant_id', userProfile.tenant_id)
        .order('name', { ascending: true });

      // Apply search filter
      if (filters?.search) {
        query = query.or(`name.ilike.%${filters.search}%,location_code.ilike.%${filters.search}%`);
      }

      // Apply parent location filter
      if (filters?.parent_location_id) {
        query = query.eq('parent_location_id', filters.parent_location_id);
      }

      // Apply location level filter
      if (filters?.location_level_id) {
        query = query.eq('location_level_id', filters.location_level_id);
      }

      const { data, error } = await query;

      if (error) {
        console.error('Error fetching locations:', error);
        throw error;
      }

      return data as Location[];
    },
    enabled: !!userProfile?.tenant_id,
  });
};

export const useCreateLocation = () => {
  const queryClient = useQueryClient();
  const { userProfile } = useAuth();

  return useMutation({
    mutationFn: async (data: LocationFormData) => {
      if (!userProfile?.tenant_id) {
        throw new Error('User not authenticated');
      }

      const locationData = {
        name: data.name,
        description: data.description,
        tenant_id: userProfile.tenant_id,
        parent_location_id: data.parent_location_id || null,
        location_level_id: data.location_level_id,
        // location_code will be auto-generated by the database trigger if not provided
        ...(data.location_code && { location_code: data.location_code }),
      };

      const { data: result, error } = await supabase
        .from('locations')
        .insert(locationData)
        .select()
        .single();

      if (error) {
        console.error('Error creating location:', error);
        throw error;
      }

      return result;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['locations'] });
      toast({
        title: "Success",
        description: "Location created successfully",
      });
    },
    onError: (error: any) => {
      console.error('Create location error:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to create location",
        variant: "destructive",
      });
    },
  });
};

export const useUpdateLocation = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ id, data }: { id: string; data: Partial<LocationFormData> }) => {
      const { data: result, error } = await supabase
        .from('locations')
        .update(data)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        console.error('Error updating location:', error);
        throw error;
      }

      return result;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['locations'] });
      toast({
        title: "Success",
        description: "Location updated successfully",
      });
    },
    onError: (error: any) => {
      console.error('Update location error:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to update location",
        variant: "destructive",
      });
    },
  });
};

export const useDeleteLocation = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from('locations')
        .delete()
        .eq('id', id);

      if (error) {
        console.error('Error deleting location:', error);
        throw error;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['locations'] });
      toast({
        title: "Success",
        description: "Location deleted successfully",
      });
    },
    onError: (error: any) => {
      console.error('Delete location error:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to delete location",
        variant: "destructive",
      });
    },
  });
};